package otmp

use core {package, io, tprintf, iter, Optional, conv}
use core.misc {
    as_any,
    any_as,
    any_iter,
    any_dereference,
    any_selector,
    any_subscript
}

#package
TemplateRenderer :: struct {
    t: &Template;
    w: &io.Writer;
    reg: &TemplateRegistry;

    scope: &TemplateScope;
    blocks: Map(str, &TNode);

    index_variable: &i32;

    error: str;
}

#package
render_template :: (use r: &TemplateRenderer) -> Error {
    return render_instructions(r, t.instructions);
}

#local
render_instructions :: (use r: &TemplateRenderer, instrs: [..] &TNode) -> Error {
    for instrs {
        switch it {
            case text: .Text do io.write_str(w, text);

            case &block: .Block {
                if blocks->has(block.block_name) {
                    error = tprintf("Block '{}' defined multiple times.");
                    return .Render_Error;
                }

                blocks[block.block_name] = it;
            }

            case template_name: .Extend {
                template := reg->get_template(template_name);
                if template == null {
                    error = tprintf("Template '{}' not found.");
                    return .Render_Error;
                }

                if err := render_instructions(r, template.instructions); err != .None {
                    return err;
                }
            }

            case &for_node: .Foreach {
                if !r.index_variable {
                    r.index_variable = new_temp(i32);
                }

                *r.index_variable = 0;
                scope->put("__index", as_any(r.index_variable));

                evaluate_expr(r, for_node.list)->with([list] {
                    for any_iter(list) {
                        scope->put(for_node.var_name, it);

                        if err := render_instructions(r, for_node.body); err != .None {
                            return err;
                        }

                        *r.index_variable += 1;
                    }

                    scope->delete(for_node.var_name);
                });
            }

            case &cond: .Condition {
                condition_value := evaluate_expr(r, cond.cond)
                                    ->transform(any_is_truthy);
                
                rendered := false;
                condition_value->with([truth] {
                    if truth {
                        rendered = true;
                        if err := render_instructions(r, cond.true_block); err != .None {
                            return err;
                        }
                    }
                });

                if !rendered {
                    if err := render_instructions(r, cond.false_block); err != .None {
                        return err;
                    }
                }
            }

            case &let: .Let {
                evaluate_expr(r, let.value)->with([value] {
                    scope->put(let.var_name, value);
                });
            }

            case &block: .ExprBlock {
                blocks->get(block.block_name)->with([the_block] {
                    if err := render_instructions(r, union_as_ptr(the_block, .Block).contents); err != .None {
                        return err;
                    }
                });
            }

            case &partial: .ExprPartial {
                template := reg->get_template(partial.partial_name);
                if !template {
                    logf(.Error, "Partial '{}' not found.", partial.partial_name);
                    continue;
                }

                for arg: iter.as_iter(partial.arguments)
                    |> iter.enumerate()
                {
                    // ROBUSTNESS: Normally, allocating to a temporary allocator for
                    // something stored in a map is a bad idea, but here, because the
                    // map is only used within this function, so long as the temporary
                    // allocator is never cleared, there is nothing wrong with using
                    // tprintf.
                    evaluate_expr(r, arg.value)->with([v] {
                        scope->put(tprintf("_{}", arg.index), v);
                    });
                }

                if err := render_instructions(r, template.instructions); err != .None {
                    return err;
                }
            }

            case #default {
                value := evaluate_expr(r, cast(&TNode) it);
                if !value {
                    if error do return .Render_Error;
                    continue;
                }

                // There are weird bugs related to Optional any's (? any), where
                // the wrong any is returned. Unwrapping as a pointer fixes this
                // bug.
                value_ := value->unwrap_ptr();
                io.write_format_va(w, "{}", .[*value_]);
            }
        }
    }

    return .None;
}

#local
evaluate_expr :: (use r: &TemplateRenderer, expr: &TNode) -> ? any {
    switch expr {
        // foo
        case &var: .ExprVar {
            return scope->get_opt(var.var_name);
        }

        // foo.bar
        case &selector: .ExprSelector {
            return evaluate_expr(r, selector.var)?
                |> any_dereference()
                |> any_selector(selector.field);
        }

        // foo[bar]
        case &subscript: .ExprSubscript {
            sub_any := evaluate_expr(r, subscript.var)?;
            sub := evaluate_expr(r, subscript.sub)->and_then(any_to_int);
            return switch sub {
                case v: .Some => any_subscript(sub_any, ~~ v);
                case #default => .{};
            };
        }

        // 123
        case &int: .ExprInt do return as_any(&int.val);

        // "asdf"
        case &string: .ExprString do return as_any(&string.val);

        // true or false
        case &bowl: .ExprBool do return as_any(&bowl.val);

        // a + b
        case .ExprBinOp do return evaluate_binop(r, expr);

        case #default {
            error = tprintf("Unhandled node type '{}'", expr.tag);
            return .{};
        }
    }
}

#local
evaluate_binop :: (use r: &TemplateRenderer, expr: &TNode) -> ? any {
    binop := expr.ExprBinOp?;

    left := evaluate_expr(r, binop.left)?;
    right := evaluate_expr(r, binop.right)?;

    if left.type == str {
        left_str := (any_as(left, str)  |> Optional.from_ptr())?;
        if binop.op == .Add {
            buf := make_temp(dyn_str);
            res := conv.format_va(&buf, "{}{}", .[
                any.{ &left_str,  str},
                right
            ]);
            return_value(res);
        }

        right_str := (any_as(right, str) |> Optional.from_ptr())?;

        switch binop.op {
            case .Eq do return_value(left_str == right_str);
            case .Ne do return_value(left_str != right_str);
            case #default do return .{};
        }
    }

    if left.type == bool {
        left_bool  := (any_as(left, bool)  |> Optional.from_ptr())?;
        right_bool := (any_as(right, bool) |> Optional.from_ptr())?;

        switch binop.op {
            case .And do return_value(left_bool && right_bool);
            case .Or  do return_value(left_bool || right_bool);
            case .Eq  do return_value(left_bool == right_bool);
            case .Ne  do return_value(left_bool != right_bool);
            case #default do return .{};
        }
    }

    left_value  := any_to_int(left)?;
    right_value := any_to_int(right)?;

    switch binop.op {
        case .Add do return_value(left_value + right_value);
        case .Sub do return_value(left_value - right_value);
        case .Mul do return_value(left_value * right_value);
        case .Div do return_value(left_value / right_value);
        case .Mod do return_value(left_value % right_value);

        case .Eq do return_value(left_value == right_value);
        case .Ne do return_value(left_value != right_value);
        case .Lt do return_value(left_value <  right_value);
        case .Le do return_value(left_value <= right_value);
        case .Gt do return_value(left_value >  right_value);
        case .Ge do return_value(left_value >= right_value);
    }
    
    return .{};


    // Helper macro to allocate and return an any from temporary storage.
    return_value :: macro (x: $T) {
        result := new_temp(T);
        *result = x;
        return .{ Some = as_any(result) };
    }
}


#local
// :StandardLibrary
any_to_int :: (v: any) -> ? i64 {
    switch v.type {
        C(u32);
        C(i32);
        C(u64);
        C(i64);

        C :: macro (T: type_expr) {
            case T do return cast(i64, *cast(&T) v.data);
        }
    }

    return .{};
}

#local
any_is_truthy :: (v: any) -> bool {
    any_to_int(v)->with([x] { return x != 0; });

    switch v.type {
        case bool do return *cast(&bool, v.data);
        case str  do return (*cast(&str, v.data)).count > 0;
    }

    return false;
}


