package otmp

use core {io, tprintf, iter}
use core.misc {
    any_iter,
    any_dereference,
    any_selector,
    any_subscript
}

#package
TemplateRenderer :: struct {
    t: ^Template;
    w: ^io.Writer;
    reg: ^TemplateRegistry;

    scope: ^TemplateScope;
    blocks: Map(str, ^TNodeBlock);

    error: str;
}

#package
render_template :: (use r: ^TemplateRenderer) -> Error {
    return render_instructions(r, t.instructions);
}

#local
render_instructions :: (use r: ^TemplateRenderer, instrs: [..] ^TNode) -> Error {
    for instrs {
        switch it.type {
            case TNodeText {
                text := cast(^TNodeText) it;
                io.write_str(w, text.text);
            }    

            case TNodeBlock {
                block := cast(^TNodeBlock) it;
                if blocks->has(block.block_name) {
                    error = tprintf("Block '{}' defined multiple times.");
                    return .Render_Error;
                }

                blocks[block.block_name] = block;
            }

            case TNodeExtend {
                extend := cast(^TNodeExtend) it;
                template := reg->get_template(extend.template_name);
                if template == null {
                    error = tprintf("Template '{}' not found.");
                    return .Render_Error;
                }

                if err := render_instructions(r, template.instructions); err != .None {
                    return err;
                }
            }

            case TNodeForeach {
                // :Temporary :TemplateVariables
                for_node := cast(^TNodeForeach) it;
                var := cast(^TExprVar) for_node.list;
                if !(scope->has(var.var_name)) {
                    continue;
                }

                for any_iter(scope->get(var.var_name)) {
                    scope->put(for_node.var_name, it);

                    if err := render_instructions(r, for_node.body); err != .None {
                        return err;
                    }
                }

                scope->delete(for_node.var_name);
            }



            case TExprBlock {
                block := cast(^TExprBlock) it;
                if !(blocks->has(block.block_name)) {
                    continue;
                }

                if err := render_instructions(r, blocks[block.block_name].contents); err != .None {
                    return err;
                }
            }

            case TExprPartial {
                partial := cast(^TExprPartial) it;
                template := reg->get_template(partial.partial_name);
                if !template {
                    continue;
                }

                for iter.as_iter(partial.arguments)
                    |> iter.enumerate()
                {
                    // ROBUSTNESS: Normally, allocating to a temporary allocator for
                    // something stored in a map is a bad idea, but here, because the
                    // map is only used within this function, so long as the temporary
                    // allocator is never cleared, there is nothing wrong with using
                    // tprintf.
                    scope->put(tprintf("{}", it.index), resolve_expr_to_any(r, it.value));
                }

                if err := render_instructions(r, template.instructions); err != .None {
                    return err;
                }
            }

            case TExprVar, TExprSelector, TExprSubscript {
                var := resolve_expr_to_any(r, cast(^TExpr) it);
                if !var.data do continue;

                io.write_format_va(w, "{}", .[var]);
            }

            case #default {
                error = tprintf("Unhandled node type '{}'", it.type);
                return .Render_Error;
            }
        }
    }

    return .None;
}

#local
resolve_expr_to_any :: (use r: ^TemplateRenderer, expr: ^TExpr) -> any {
    switch expr.type {
        case TExprVar {
            var := cast(^TExprVar) expr;
            // :ErrorHandling if variable does not exist
            return scope->get(var.var_name);
        }

        case TExprSelector {
            selector := cast(^TExprSelector) expr;

            sub_any := resolve_expr_to_any(r, selector.var);
            sub_any  = any_dereference(sub_any);
            return any_selector(sub_any, selector.field);
        }

        case TExprSubscript {
            subscript := cast(^TExprSubscript) expr;

            sub_any := resolve_expr_to_any(r, subscript.var);
            sub := any_to_int(resolve_expr_to_any(r, subscript.sub));

            return any_subscript(sub_any, ~~ sub);
        }
    }

    return .{null, void};
}


#local
// :StandardLibrary
any_to_int :: (v: any) -> i64 {
    switch v.type {
        C(u32);
        C(i32);
        C(u64);
        C(i64);

        C :: macro (T: type_expr) {
            case T do return ~~ *cast(^T) v.data;
        }
    }

    return 0;
}
