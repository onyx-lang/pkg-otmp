package otmp

use core.alloc {as_allocator, arena}
use core {package, array, io, os, string, tprintf, printf}

//
// Template Registry
// 

registry :: () -> TemplateRegistry {
    t: TemplateRegistry;
    t.arena = arena.make(context.allocator, 64 * 1024);
    t.templates->init();

    return t;
}

#overload
delete :: (t: ^TemplateRegistry) {
    for ^temp: t.templates.entries {
        delete(temp.value);
    }

    delete(^t.templates);
    arena.free(^t.arena);
}

#inject TemplateRegistry {
    load_directory :: (self: ^TemplateRegistry, dir: str, extension: str) {
        recurse :: (self: ^TemplateRegistry, dir, prefix, extension: str) {
            for os.list_directory(dir) {
                it_name := it->name();

                if string.ends_with(it_name, extension) {
                    name := it_name;
                    name = name[0 .. string.last_index_of(name, #char ".")];

                    if prefix {
                        name = tprintf("{}/{}", prefix, name);
                    }

                    self->load_template(name, tprintf("{}/{}", dir, it_name));
                }

                if it.type == .Directory {
                    p := it_name;
                    if prefix {
                        p = tprintf("{}/{}", prefix, it_name);
                    }

                    recurse(self,
                        tprintf("{}/{}", dir, it_name), 
                        p,
                        extension);
                }
            }
        }

        recurse(self, dir, "", extension);
    }

    load_template :: (self: ^TemplateRegistry, name: str, filename: str) -> Error {
        printf("Loading template {} from {}.\n", name, filename);
        if self.templates->has(name) {
            printf("[ERROR] Template '{}' already exists.\n");
            return .Duplicate_Template;
        }

        if !os.is_file(filename) {
            return .Template_Not_Found;
        }

        contents := os.get_contents(filename);
        stored_contents := contents;
        defer delete(^stored_contents);

        permanent_name := string.alloc_copy(name, as_allocator(^self.arena));

        temp          := template_make(as_allocator(^self.arena));
        temp.filepath  = filename |> string.alloc_copy(as_allocator(^self.arena));
        temp.name      = permanent_name;

        if err := parse_template(temp, ^contents); err != .None {
            return .Template_Parse_Error;
        }

        self.templates[permanent_name] = temp;
        return .None;
    }

    refresh_templates :: (self: ^TemplateRegistry) {
        for ^temp: self.templates.entries {
            array.clear(^temp.value.instructions);
            arena.clear(^temp.value.node_storage);

            contents := os.get_contents(temp.value.filepath);
            stored_contents := contents;
            defer delete(^stored_contents);

            parse_template(temp.value, ^contents);
        }
    }

    get_template :: (self: ^TemplateRegistry, name: str) -> ^Template {
        return self.templates[name];
    }

    render_template :: (self: ^TemplateRegistry, name: str, output: ^io.Writer, scope: any) -> Error {
        temp := self.templates[name];
        if temp == null {
            return .Template_Not_Found;
        }

        tscope, _ := core.misc.any_to_map(scope);
        defer delete(^tscope);

        return temp->render(self, ^tscope, output);
    }
}




//
// Template
//
#package
template_make :: (alloc: Allocator) -> ^Template {
    t := new(Template, alloc);
    t.node_storage = arena.make(context.allocator, 64 * 1024);
    return t;
}

#overload
delete :: (t: ^Template) {
    delete(^t.instructions);
    arena.free(^t.node_storage);
}

#inject Template {
    render :: (self: ^Template, reg: ^TemplateRegistry, scope: ^TemplateScope, output: ^io.Writer) -> Error {
        r := ^TemplateRenderer.{
            t = self,
            w = output,
            reg = reg,
            scope = scope
        };

        err := render_template(r);

        if err != .None {
            core.printf("Template Error: {}\n", r.error);
        }

        return err;
    }
}


#package
make_node :: macro (t: ^Template, $T: type_expr) -> ^T where IsTNode(T) {
    r := new(T, allocator=as_allocator(^t.node_storage));
    r.type = T;
    return r;
}

#package
make_expr :: macro (t: ^Template, $T: type_expr) -> ^T where IsTExpr(T) {
    r := new(T, allocator=as_allocator(^t.node_storage));
    r.type = T;
    return r;
}

